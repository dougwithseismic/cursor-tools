name: Release
on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        if: matrix.os == 'macos-latest'
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip setuptools wheel

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      # Install pnpm using npm for Windows
      - name: Install pnpm (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm install -g pnpm
          pnpm setup
          pnpm install -g windows-build-tools node-gyp

      # Use pnpm action for macOS
      - name: Setup pnpm (macOS)
        if: matrix.os == 'macos-latest'
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Visual Studio Build Tools
        if: matrix.os == 'windows-latest'
        run: |
          npm config set msvs_version 2019
          npm config set python python3

      - name: Install dependencies
        run: |
          pnpm config set store-dir ${{ env.STORE_PATH }}
          pnpm install --no-frozen-lockfile

      - name: Rebuild native modules
        run: |
          cd apps/electron-app
          pnpm rebuild better-sqlite3 --build-from-source
          pnpm rebuild sqlite3 --build-from-source

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_build_from_source: true
        run: |
          cd apps/electron-app
          pnpm build
          pnpm electron-builder --publish never

      - name: Upload Windows Artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: apps/electron-app/dist/*.exe

      - name: Upload macOS Artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifacts
          path: apps/electron-app/dist/*.dmg

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-artifacts/*
            macos-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
