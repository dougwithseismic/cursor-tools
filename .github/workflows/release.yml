name: Release
on:
  push:
    tags:
      - "v*"

jobs:
  release-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup Windows build tools
        shell: powershell
        run: |
          pnpm config set msvs_version 2019 --location project
          pnpm config set python ${{ env.pythonLocation }} --location project

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install and build
        env:
          NODE_ENV: production
          npm_config_build_from_source: true
          PYTHON: ${{ env.pythonLocation }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm turbo run build --filter=electron-app...
          cd apps/electron-app
          pnpm rebuild better-sqlite3 --build-from-source
          pnpm rebuild sqlite3 --build-from-source

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_build_from_source: true
        run: |
          cd apps/electron-app
          pnpm build
          pnpm electron-builder --win --publish never

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: apps/electron-app/dist/*.exe
          retention-days: 5

  release-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m ensurepip --upgrade
          python -m pip install --upgrade pip setuptools wheel

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install and build
        env:
          NODE_ENV: production
          npm_config_build_from_source: true
        run: |
          pnpm install --no-frozen-lockfile
          pnpm turbo run build --filter=electron-app...
          cd apps/electron-app
          pnpm rebuild better-sqlite3 --build-from-source
          pnpm rebuild sqlite3 --build-from-source

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_build_from_source: true
        run: |
          cd apps/electron-app
          pnpm build
          pnpm electron-builder --mac --publish never

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifacts
          path: apps/electron-app/dist/*.dmg
          retention-days: 5

  create-release:
    needs: [release-windows, release-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-artifacts/*
            macos-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
          discussion-category: "Announcements"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
